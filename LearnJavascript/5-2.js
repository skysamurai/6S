/*
1. Сумма пользовательских чисел
Создайте скрипт, который запрашивает ввод двух чисел (используйте prompt) и после показывает их сумму.
*/

let a = prompt("Введите a");
let b = prompt("Введите b");
console.log(+a + +b)

/*
2. Почему 6.35.toFixed(1) == 6.3?
Методы Math.round и toFixed, согласно документации, округляют до ближайшего целого числа: 0..4 округляется в меньшую сторону, тогда как 5..9 в большую сторону.
Например:
alert( 1.35.toFixed(1) ); // 1.4
Но почему в примере ниже 6.35 округляется до 6.3?
alert( 6.35.toFixed(1) ); // 6.3
Как правильно округлить 6.35?
*/
// Видимо, потому что в 6.35 в js будет 6.34хххххх, проверим это 
console.log (6.35.toFixed(20))
// Как видим это число 6.34999999999999964473 и соответственно при округлении оно ведет себя так.
// Для исправления умножим округим до 0 знаков и разделим на 10
console.log ((6.35*10).toFixed(0)/10)


/*
3. Ввод числового значения
Создайте функцию readNumber, которая будет запрашивать ввод числового значения до тех пор, пока посетитель его не введёт.
Функция должна возвращать числовое значение.
Также надо разрешить пользователю остановить процесс ввода, отправив пустую строку или нажав «Отмена». В этом случае функция должна вернуть null.
*/

function readNumber() {
  let number
  while(1){
    number = prompt('Введите число и не тупите пожалуйста введите именно число, иначе ничего не выйдет','');
    if (number === null || number === '') {return null}
    if (isFinite(number)) {return +number} 
        alert('Я же просил число ввести, а ты что вводишь, давай исправляй');
  }
}

readNumber()

/*
4. Бесконечный цикл по ошибке
Этот цикл – бесконечный. Он никогда не завершится, почему?
let i = 0;
while (i != 10) {
  i += 0.2;
}
*/
// Ввидимо опять потеря точности при работе с дробями, проверим

let i = 0;
while (i != 10) {
  console.log( i += 0.2);
  if (i > 11) {
  break;
  }
}

//Что и требовалось доказать!! Для исправления умножаем все на 10 (шаг итерации и условие прохождения цикла) и при необходимости делим или меняем условие продолжения цикла скажем на i < 9.9

/*
5. Случайное число от min до max
Встроенный метод Math.random() возвращает случайное число от 0 (включительно) до 1 (но не включая 1)
Напишите функцию random(min, max), которая генерирует случайное число с плавающей точкой от min до max (но не включая max).
Пример работы функции:
alert( random(1, 5) ); // 1.2345623452
alert( random(1, 5) ); // 3.7894332423
alert( random(1, 5) ); // 4.3435234525
*/
function random(min, max) {
  let rnd =-0
  while(rnd < min ) {
    rnd = Math.random()*max;
}
return rnd;
}

alert( random(1, 5) );
alert( random(4, 5) );

/*
6. Напишите функцию randomInteger(min, max), которая генерирует случайное целое (integer) число от min до max (включительно).
Любое число из интервала min..max должно появляться с одинаковой вероятностью.
Пример работы функции:
alert( randomInteger(1, 5) ); // 1
alert( randomInteger(1, 5) ); // 3
alert( randomInteger(1, 5) ); // 5
*/

function randomInteger(min, max) {
  let rnd =-0
  while(rnd < min ) {
    rnd = Math.random()*(max+1);
}
return Math.floor(rnd);
}

alert( randomInteger(1, 5) ); // 1
alert( randomInteger(1, 5) ); // 3
alert( randomInteger(1, 5) ); // 5
alert( randomInteger(1, 5) ); // 5