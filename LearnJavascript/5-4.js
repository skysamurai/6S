/*
1. Скопирован ли массив?
?Что выведет следующий код?
let fruits = ["Яблоки", "Груша", "Апельсин"];
// добавляем новое значение в "копию"
let shoppingCart = fruits;
shoppingCart.push("Банан");
// что в fruits?
alert( fruits.length ); // ?
*/
// 4 ведет себя как объект не копируются значения, а только ссылка на массив

/*
2. Операции с массивами
Давайте произведём 5 операций с массивом.
Создайте массив styles с элементами «Джаз» и «Блюз».
Добавьте «Рок-н-ролл» в конец.
Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
Удалите первый элемент массива и покажите его.
Вставьте Рэп и Регги в начало массива.

?Массив по ходу выполнения операций:
Джаз, Блюз
Джаз, Блюз, Рок-н-ролл
Джаз, Классика, Рок-н-ролл
Классика, Рок-н-ролл
Рэп, Регги, Классика, Рок-н-ролл
 */

let styles = ['Джаз', 'Блюз',];
styles.push('Рок-н-ролл');
console.log(styles);
styles[ Math.floor((styles.length-1)/2)] = 'Классика'
console.log(styles);
console.log(styles.shift());
styles.unshift('Рэп', 'Регги');
console.log(styles);

/*
3. Вызов в контексте массива
?Каков результат? Почему?
let arr = ["a", "b"];
arr.push(function() {
  alert( this );
});
?arr[2](); // ?
*/

// a,b,function() {alert( this );} - вызов функции aar[2], под индексом 2 у него this, он this ведет к arr[], alert выводит его.

/*
4. Сумма введённых чисел
?Напишите функцию sumInput(), которая:
Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
Подсчитывает и возвращает сумму элементов массива.
P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».
*/

function sumInput() {
  let arr = [];
  let sumArr = 0;
  sum();

  function sum() {
    let input = prompt('Please enter a number');
    if (+input || (input === '0')) {
      sumArr += +input;
      arr.push(+input);
      sum();
    };
  }

  console.log(sumArr);
  return sumArr;
};
sumInput();

/*
5. Подмассив наибольшей суммы
На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].
Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.
Функция getMaxSubSum(arr) должна возвращать эту сумму.

Например:
getMaxSubSum([-1, 2, 3, -9]) == 5 (сумма выделенных элементов)
getMaxSubSum([2, -1, 2, 3, -9]) == 6
getMaxSubSum([-1, 2, 3, -9, 11]) == 11
getMaxSubSum([-2, -1, 1, 2]) == 3
getMaxSubSum([100, -9, 2, -3, 5]) == 100
getMaxSubSum([1, 2, 3]) == 6 (берём все)
Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

getMaxSubSum([-1, -2, -3]) = 0
Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.
*/

function getMaxSubSum(arr) {
  let sumMax = 0;
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
    if (sum < 0 ) {
      sum = 0;
      continue;
    }
    
    if (sumMax < sum) {
      sumMax = sum;
    }
  }
  console.log(sumMax);
  return sumMax;
}

getMaxSubSum([-1, 2, 3, -9]);
getMaxSubSum([2, -1, 2, 3, -9]);
getMaxSubSum([-1, 2, 3, -9, 11]);
getMaxSubSum([-2, -1, 1, 2]);
getMaxSubSum([100, -9, 2, -3, 5]);
getMaxSubSum([1, 2, 3]);
getMaxSubSum([-1, -2, -3]);